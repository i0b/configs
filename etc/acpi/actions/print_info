OSD_DEST=`which osd_cat`
#OSD_FONT="-adobe-helvetica-bold-*-*-*-34-*-*-*-*-*-*-*"
#OSD_FONT="-*-arial-medium-r-*-*-34-*-*-*-*-*-ibm-*"
OSD_FONT="-*-terminal-*-*-*-*-*-*-*-*-*-*-*-*"

OSD_STYLE="--delay=3 --age=0 --lines=2 --pos=bottom --align=center --font=${OSD_FONT} --colour=green --shadow=2"

# get user running X display (needed when run by script)
XUSER=`ps -C xinit -o user h`


osd_print() {
   #if [ "${USER}" == "${XUSER}" ]; then
   #    echo $@ | ${XOSD}
   #else
   echo $@ | su ${XUSER} -c "echo ${1} | DISPLAY=${DISPLAY:-:0.0} ${OSD_DEST} ${OSD_STYLE}" &
   #fi
}


OUTPUT_TERM="/dev/tty1"
# width:
STAT_COL=$(/bin/stty -F ${OUTPUT_TERM} size)
# strip the rows number, we just want columns
STAT_COL=${STAT_COL##* }
if [ "$STAT_COL" = "0" ]; then
	# if output was 0 (serial console), set default width to 80
	STAT_COL=80
elif [ ! -t 1 ]; then
	# disable color on output to non-tty
	STAT_COL=80
	USECOLOR=""
fi
# we use 13 characters for our own stuff
# add additional 48 characters to fit the size
STAT_COL=$(($STAT_COL - 13 + 48))

# disable colors on broken terminals
TERM_COLORS="$(/bin/tput colors 2>/dev/null)"
if [ $? = 3 ]; then
	TERM_COLORS=8
elif [ -n "${TERM_COLORS}" ]; then
	case "${TERM_COLORS}" in
		*[!0-9]*)
			USECOLOR=""
			;;
		*)
			USECOLOR="yes"
			;;
	esac
else
	USECOLOR=""
fi

# colors:
if [ "$USECOLOR" = "YES" -o "$USECOLOR" = "yes" ]; then
	C_MAIN="\033[1;37;40m"      # main text
	C_OTHER="\033[1;34;40m"     # prefix & brackets
	C_SEPARATOR="\033[1;30;40m" # separator

	C_BUSY="\033[0;36;40m"      # busy
	C_FAIL="\033[1;31;40m"      # failed
	C_DONE="\033[1;37;40m"      # completed
	C_BKGD="\033[1;35;40m"      # backgrounded

	C_H1="\033[1;37;40m"        # highlight text 1
	C_H2="\033[1;36;40m"        # highlight text 2

	C_CLEAR="\033[1;0m"
fi

#if [ -t 1 ]; then
	SAVE_POSITION="\033[s"
	RESTORE_POSITION="\033[u"
	DEL_TEXT="\033[$(($STAT_COL+4))G"
#fi

# prefixes:

PREFIX_REG="::"
PREFIX_HL=" >"

# functions:

stat_busy() {
  OUTPUT_STRING="${C_OTHER}${PREFIX_REG} ${C_MAIN}${1}${C_CLEAR} "
  OUTPUT_STRING="${OUTPUT_STRING} ${SAVE_POSITION}"
  OUTPUT_STRING="${OUTPUT_STRING} ${DEL_TEXT}" #deltext
  OUTPUT_STRING="${OUTPUT_STRING}   ${C_OTHER}[${C_BUSY}BUSY${C_OTHER}]${C_CLEAR} "
	#OUTPUT_STRING="${C_OTHER}${PREFIX_REG} ${C_MAIN}${1}${C_CLEAR} ${SAVE_POSITION}   ${C_OTHER}[${C_BUSY}BUSY${C_OTHER}]${C_CLEAR} "
	echo -ne "${OUTPUT_STRING}" >> ${OUTPUT_TERM}
}

stat_done() {
  	OUTPUT_STRING="${OUTPUT_STRING} ${DEL_TEXT}" #deltext
  	OUTPUT_STRING="${OUTPUT_STRING}   ${C_OTHER}[${C_DONE}DONE${C_OTHER}]${C_CLEAR} \n"
	echo -ne "${OUTPUT_STRING}" >> ${OUTPUT_TERM}
}

stat_fail() {
  	OUTPUT_STRING="${OUTPUT_STRING} ${DEL_TEXT}" #deltext
  	OUTPUT_STRING="${OUTPUT_STRING}   ${C_OTHER}[${C_FAIL}FALE${C_OTHER}]${C_CLEAR} \n"
	echo -ne "${OUTPUT_STRING}" >> ${OUTPUT_TERM}
}

# End of file
# vim: set ts=2 noet:
